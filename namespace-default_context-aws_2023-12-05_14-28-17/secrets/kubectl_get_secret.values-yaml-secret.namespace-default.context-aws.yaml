apiVersion: v1
data:
  values.yaml: 
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: starburst
    meta.helm.sh/release-namespace: default
  creationTimestamp: "2023-11-27T21:10:24Z"
  labels:
    app.kubernetes.io/managed-by: Helm
    name: values-yaml-secret
  name: values-yaml-secret
  namespace: default
  resourceVersion: "42538163"
  uid: 25c06f1b-d93a-4d19-825b-5d43d6a5bc3a
type: Opaque
